Service: Character 
Types: bool, int, Commande 

Observators: 
	positionX: [Character] → int 
	positionY: [Character] → int 
	engine: [Character] → Engine 
	charBox: [Character] → Hitbox 
	life: [Character] → int 
	const speed: [Character] → int 
	faceRight: [Character] → bool 
	dead: [Character] → bool
	isCrouch(C): [Character] → bool
	isJumpHigh: [Character] → bool
	isJumpRightHigh: [Character] → bool
	isJumpLeftHigh: [Character] → bool
	maxY: [Character] → int
	
	
	Constructors: init: int × int × bool × Engine → [Character] 
		pre init(l,s,f,e) requires l > 0 ∧ s > 0 
		
	Operators: 
		moveLeft: [Character] → [Character] 
			pre moveLeft() require positionY(C) = 0
		moveRight: [Character] → [Character] 
			pre moveRight() require positionY(C) = 0
		switchSide: [Character] → [Character] 
		step: [Character] × Commande → [Character] 
			pre step() requires ¬dead 
		setPosition: [Character] × int × int → [Character]
		damaged: [Character] × int → [Character]
		crouch: [Character] → [Character]
			pre crouch require ¬isCrouch(C) ∧ positionY(C) = 0
		rise: [Character] → [Character]
			pre crouch require isCrouch(C) ∧ positionY(C) = 0
		jump: [Character] → [Character]
			pre jump() require positionY(C) = 0 ∧ ¬isCrouch(C)
		jumpright: [Character] → [Character]
			pre jumpright() require positionY(C) = 0 ∧ ¬isCrouch(C)
		jumpleft: [Character] → [Character]
			pre jumpleft() require positionY(C) = 0 ∧ ¬isCrouch(C)
	
	Observations: 
		[invariant]: positionX(C) > 0 ∧ positionX(C) < Engine:: width(engine) ∧ positionY(C) > 0 ∧ positionY(C) < Engine:: height(engine) ∧ dead(C) = ¬(life > 0) 
		∧ !∃i tq (player(engine(c), i) != C ∧ collisionwith(hitbox(C), hitbox(player(engine(C), i))))
		∧ positionX(hitbox(C)) = positionX(C) 
		∧ positionY(hitbox(C)) = positionY(C)
		
		[init]: life(init(l, s, f, e)) = l ∧ speed(init(l, s, f, e)) = s ∧ faceRight(init(l, s, f, e)) = f ∧ engine(init(l, s, f, e)) = e 
		∧ ∃ b:Hitbox, charbox(init(l, s, f, e)) = b
		isCrouch(C) = false ∧ isJumpHigh = false ∧ isJumpRightHigh = false	∧ isJumpLeftHigh = false ∧ maxY ≤ 0
		 
		[moveLeft]: (∃i, player(engine(C), i) != C ∧ collisionwith(hitbox(moveLeft(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveLeft(C)) = positionX(C)
		positionX(C) ≤ speed(C) ∧(∀i, player(engine(C), i) != C ⇒ ¬collisionwith(hitbox(moveLeft(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveLeft(C)) = positionX(C) − speed(C)
		positionX(C) > speed(C) ∧(∀i, player(engine(C), i) != C ⇒ ¬collisionwith(hitbox(moveLeft(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveLeft(C)) = 0
		faceRight(moveLeft(C)) = faceRight(C) ∧ life(moveLeft(C)) = life(C)
		positionY(moveLeft(C)) = positionY(C) 
		
		
		[moveRight]: (∃i, player(engine(C), i) != C ∧ collisionwith(hitbox(moveRight(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveRight(C)) = positionX(C)
		positionX(C) <= speed(C) ∧ (∀i, player(engine(C), i) != C ⇒ ¬collisionwith(hitbox(moveRight(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveRight(C)) = positionX(C) + speed(C)
		positionX(C) ≤ speed(C) ∧(∀i, player(engine(C), i) != C ⇒ ¬collisionwith(hitbox(moveRight(C)), hitbox(player(engine(C), i)))) ⇒ positionX(moveRight(C)) = 0
		faceRight(moveRight(C)) = faceRight(C) ∧ life(moveRight(C)) = life(C)
		positionY(moveRight(C)) = positionY(C)
		
		
		[switchSide]: faceRight(switchSide(C))! = faceRight(C) 
		∧ positionX(switchSide(C)) = positionX(C) 
		
		[step]: 
		step(C, LEFT) = moveLeft(C)
		step(C, RIGHT) = moveRight(C)
		step(C, NEUTRAL) = C
		
		isJumpHigh(C) ⇒ positionY(step(C, c)) > positionY(C)
		∧ positionX(step(C, c)) = positionX(C)
		∧ positionY(step(C, c)) < maxY(C)
		∧ positionY(step(C, c)) = PositionY(C)+speed(C)
		∧ positionX(step(C, c)) = positionX(C)
		
		isJumpRightHigh(C) ⇒ positionY(step(C, c)) > positionY(C)
		∧ positionX(step(C, c)) > positionX(C)
		∧ positionY(step(C, c)) < maxY(C)
		∧ positionY(step(C, c)) = PositionY(C)+ascension(C)
		∧ positionX(step(C, c)) = positionX(C)+speed(C)
		
		isJumpLeftHigh(C) ⇒ positionY(step(C, c)) > positionY(C)
		∧ positionX(C) > positionX(step(C, c))
		∧ positionY(step(C, c)) < maxY(C)
		∧ positionY(step(C, c)) = PositionY(C)+ascension(C)
		∧ positionX(step(C, c)) = positionX(C)-speed(C)
		
		[damaged]:
		life(damaged(C, d)) = life(C) - d
		
		[setPosition]:
		positionX(setPosition(C,x,y)) = x
		positionY(setPosition(C,x,y)) = y
		
		[crouch]:
		positionX(C) = positionX(crouch(C))
		positionY(C) = positionY(crouch(C))
		∀ u,v:int × int, BelongsTo(hitbox(crouch(C)),u,v) ⇒ Belongsto(hitbox(C),u,v)
		
		[raise]:
		hitbox(C) = hitbox(raise(crouch(C)))
		positionX(C) = positionX(raise(C))
		positionY(C) = positionY(raise(C))
		∀ u,v:int × int, Belongsto(hitbox(C),u,v) ⇒ BelongsTo(hitbox(rise(C)),u,v)
		
		[jump]:
		positionY(C) < positionY(jump(C))
		positionX(C) = positionX(jump(C))
		
		[jumpright]:
		positionY(C) < positionY(jumpright(C))
		positionX(C) < positionX(jumpright(C))
		
		[jumpleft]:
		positionY(C) < positionY(jumpleft(C))
		positionX(C) > positionX(jumpleft(C))
		
		[isJumpHigh]:
		
		[isJumpRightHigh]:
		
		[isJumpLeftHigh]:
