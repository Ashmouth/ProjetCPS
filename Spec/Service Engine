Service: Engine 
Types: bool, int, Commande 

Observators: 
	const height: [Engine] → int 
	const width: [Engine] → int 
	char: [Engine] × int → Character 
		pre char(E,i) requires i ∈ {1, 2} 
	player: [Engine] × int → Player 
		pre player(E,i) requires i ∈ {1, 2} 
	gameOver: [Engine] → bool 
	
	Constructors: init: int × int × int × Player × Player × Character × Character → [Engine] 
		pre init(h,w,s,p1,p2,c1,c2) requires h > 0 ∧ s > 0 ∧ w > s ∧ p1 != p2 ∧ c2 != c1
		
	Operators: step: [Engine] × Commande × Commande → [Engine] 
		pre step(E) requires ¬gameOver(E) 
		
	Observations: 
		[invariant]: gameOver(E) = ∃i ∈ {1, 2} Character ::dead(char(E, i)) 
		[init]: 
			height(init(h, w, s, p1, p2, c1, c2)) = h 
			width(init(h, w, s, p1, p2, c1, c2)) = w 
			player(init(h, w, s, p1, p2, c1, c2), 1) = p1 
			player(init(h, w, s, p1, p2, c1, c2), 2) = p2
			char(init(h, w, s, p1, p2, c1, c2), 1) = c1
			char(init(h, w, s, p1, p2, c1, c2), 2) = c2
			Character ::positionX(c1) = w//2 − s//2 
			Character ::positionX(c2) = w//2 + s//2 
			Character ::positionY(c1) = 0 
			Character ::positionY(c2) = 0 
			Character ::faceRight(c1) 
			Character ::¬faceRight(c2) 
		[step]: 
			char(step(E), 1) = step(char(E, 1), getCommand(p1)) 
			char(step(E), 2) = step(char(E, 2), getCommand(p2))
